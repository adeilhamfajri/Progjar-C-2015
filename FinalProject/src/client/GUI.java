/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Ade Ilham Fajri
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    static DataOutputStream dout;
    private static Object GUI;
  
    String sinyal;
    static int chance;
    
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msg_text = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        msg_area = new javax.swing.JScrollPane();
        msgarea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_textActionPerformed(evt);
            }
        });

        msg_send.setText("Kirim");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        msgarea.setColumns(20);
        msgarea.setRows(5);
        msg_area.setViewportView(msgarea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(msg_area, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(msg_text))
                .addGap(18, 18, 18)
                .addComponent(msg_send)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msg_area, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msg_textActionPerformed

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msg_sendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        String lala;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        
           try{
                Socket client_socket = new Socket("localhost",414);
                
                GUI.ReceiveSoal receive = new GUI.ReceiveSoal(client_socket);
                GUI.SendSoal send = new GUI.SendSoal(client_socket);
                
      //          InputStream IS = client_socket.getInputStream();
          //      ObjectInputStream OIS = new ObjectInputStream(IS);
                
     //           Serialization serial = (Serialization)OIS.readObject();
                
   //             chance = serial.kesempatan;
              //  Thread thread_99 = new Thread(receive);
                
             while(true){

                
             //   Thread thread_99 = new Thread(receive);
             //   thread_99.start();
               receive.run();
                
                
               
             //   Thread thread_1 = new Thread(send);
                send.run();

            }}catch(Exception e){
               //.... 
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    private static javax.swing.JTextArea msgarea;
    // End of variables declaration//GEN-END:variables

    private static class ReceiveSoal {
        
        Socket client_socket=null;
        BufferedReader recieve=null;  
        String msgin = "";
        static DataInputStream din;
     
        public ReceiveSoal(Socket client_socket) {
             this.client_socket = client_socket;
        }
        
         public String run() {
            if(client_socket.isConnected()){
            try {
                System.out .println("Ngecek aja");
                din = new DataInputStream(client_socket.getInputStream());
           //     msgin = din.readUTF();
                
                while(true){
                    msgin = din.readUTF();
                    System.out.println(msgin + "\n");;
                    msgarea.setText(msgarea.getText().trim()+msgin);
                }
//                msg_area.setText(msgin);
//                System.out.println(msgin);
//                msg_area.setText(msg_area.getText().trim()+"\nServer\t: "+msgin + "\n");
//                msg_area.setText(msg_area.getText().trim()+ msgin + "\n"); 
            } catch (IOException ex) {
                Logger.getLogger(Pemain_ThreadReceiveSoal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
            else{
                System.out.println("Tidak terkoneksi");
            }
            return msgin;
        }  
    }

    private static class SendSoal {
        
        Socket client_socket=null;
        PrintWriter print=null;
        BufferedReader brinput=null;
        static DataOutputStream dout;
        

        public SendSoal(Socket client_socket) {
           this.client_socket = client_socket;
        }
        
        public void run() {
            try {
                brinput = new BufferedReader(new InputStreamReader(System.in));
                String msgout=null;
                msgout = brinput.readLine();
                
                
                dout = new DataOutputStream(client_socket.getOutputStream()); 
                dout.writeUTF(msgout);
            } catch (IOException ex) {
                Logger.getLogger(clone_client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
